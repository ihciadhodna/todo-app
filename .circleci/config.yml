version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5.8-node-browsers
        environment:
          RAILS_ENV: test
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          BUNDLE_PATH: vendor/bundle
          DB_HOST: 127.0.0.1
          DB_USERNAME: 'root' 
          DB_PASSWORD: ''

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_HOST: "%"
          MYSQL_ROOT_PASSWORD: ''
          
    working_directory: ~/todo-app

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s

      # Database setup
      - run: bundle exec rails db:create
      - run: bundle exec rails db:schema:load
      
      - run:
          name: Rspec
          command: bundle exec rspec

      # run tests!
#       - run:
#           name: run tests
#           command: |
#             mkdir /tmp/test-results
#             TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

#             bundle exec rspec --format progress \
#                             --format RspecJunitFormatter \
#                             --out /tmp/test-results/rspec.xml \
#                             --format progress \
#                             $TEST_FILES
                            
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results